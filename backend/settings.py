"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import environ
from datetime import timedelta
from pathlib import Path

env = environ.Env(DEBUG=(bool, False), REDIS_HOST=(str, "localhost"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["*"]

# Update CSRF_TRUSTED_ORIGINS to include your React app's domain
CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]

# CORS settings for development. For production, consider specifying CORS_ALLOWED_ORIGINS.
CORS_ALLOW_ALL_ORIGINS = DEBUG  # For development

CORS_ALLOW_CREDENTIALS = True
# Application definition
INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "monitoring",
    "metrics",
    "rest_framework",
    "corsheaders",
    "django_keycloak",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "backend.asgi.application"
WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {"default": env.db()}

# Radiusdesk config
RD_DB_NAME = "rd"
RD_DB_USER = "rd"
RD_DB_PASSWORD = "rd"
RD_DB_HOST = "localhost"
RD_DB_PORT = "3306"
# UNIFI config
UNIFI_DB_NAME = "ace"
UNIFI_DB_USER = ""
UNIFI_DB_PASSWORD = ""
UNIFI_DB_HOST = "localhost"
UNIFI_DB_PORT = "27117"

# Keycloak config
AUTHENTICATION_BACKENDS = ["django_keycloak.backends.KeycloakAuthorizationCodeBackend"]
AUTH_USER_MODEL = "django_keycloak.KeycloakUser"
KEYCLOAK_AUTH = {
    "URL": env("KEYCLOAK_URL"),
    "REALM": env("KEYCLOAK_REALM"),
    "CLIENT_ID": env("KEYCLOAK_CLIENT_ID"),
    "CLIENT_SECRET": env("KEYCLOAK_CLIENT_SECRET"),
}
DRF_KEYCLOAK_AUTH = {
    "URL": env("KEYCLOAK_URL"),
    "REALM": env("KEYCLOAK_REALM"),
    "CLIENT_ID": env("DRF_KEYCLOAK_CLIENT_ID"),
    "CLIENT_SECRET": None,
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PROMETHEUS_USERNAME = env("PROMETHEUS_USERNAME")
PROMETHEUS_PASSWORD = env("PROMETHEUS_PASSWORD")
PROMETHEUS_URL = env("PROMETHEUS_URL")

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "django_keycloak.authentication.KeycloakDRFAuthentication",
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Johannesburg"

USE_I18N = True

USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery config
CELERY_BROKER_URL = f"redis://{env('REDIS_HOST')}:6379/0"
CELERY_RESULT_BACKEND = f"redis://{env('REDIS_HOST')}:6379/0"
# Celery TIME_ZONE should be equal to django TIME_ZONE
# In order to schedule run_iperf3_checks on the correct time intervals
CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = False

CELERY_BEAT_SCHEDULE = {
    "ping_schedule": {
        "task": "metrics.tasks.run_pings",
        # Executes ping every 5 min
        "schedule": timedelta(minutes=5),
    },
    "syncrd_schedule": {
        "task": "monitoring.tasks.run_syncrd",
        # Executes db sync every 15 min
        "schedule": timedelta(minutes=15),
    },
    "syncunifi_schedule": {
        "task": "monitoring.tasks.run_syncunifi",
        # Executes db sync every 15 min
        "schedule": timedelta(minutes=15),
    },
}
